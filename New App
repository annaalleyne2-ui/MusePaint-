Muse Paint â€” Full Project Download
=================================

What's included:
- package.json (Vite + React)
- index.html
- manifest.json (PWA)
- src/ (React app source)
- musepaint_logo.png (logo asset)
- README.txt (this file)

How to run the web app (PWA) locally:
1. Install Node.js (16+ recommended) and npm/yarn.
2. In this project folder, run:
   npm install
   npm run dev
3. Open the URL printed by Vite (usually http://localhost:5173) to try the app.
4. To build a production PWA bundle:
   npm run build
   npm run preview  # serves the built files for quick local testing

How to create an Android APK (Capacitor + Android Studio):
1. Install Node.js, npm, and Android Studio.
2. From this project root, install Capacitor globally (if you don't have it):
   npm install --save @capacitor/core @capacitor/cli
3. Build the web project:
   npm run build
   # The built web assets are in the `dist/` folder (Vite default).
4. Initialize Capacitor (first-time):
   npx cap init musepaint com.example.musepaint --web-dir=dist
5. Add Android platform:
   npx cap add android
6. Open Android Studio and build the APK:
   npx cap open android
   # In Android Studio: Build > Build Bundle(s) / APK(s) > Build APK(s)
7. The generated APK will be available in the Android Studio build outputs. You can sideload it to your Android device for testing.

Notes about signing and Play Store:
- This package will create an unsigned debug APK. To publish to Google Play you must sign the APK with a production keystore and follow Play Store policies.
- I can't compile the APK inside this environment â€” these steps are for you to run locally or on a CI runner (GitHub Actions) with the Android SDK installed.

If you'd like, I can also:
- Prepare a ready-to-run GitHub Actions workflow that builds the web app and (optionally) produces an Android debug APK automatically (you will need to provide signing keys and an Android SDK runner).

---
Generated by the Muse Paint build assistant.


GitHub Actions (CI) for building APKs
-------------------------------------
A workflow file has been added at `.github/workflows/android-build.yml`.

Notes about signing & secrets:
- To produce a *signed* release APK you must provide a keystore and signing steps.
- Recommended approach: store your Android keystore as a GitHub secret (base64-encoded) and add steps to the workflow to decode it and sign the APK.
- For initial testing, the workflow will upload any APKs produced by the Gradle build to the workflow artifacts where you can download them.

Signing example (add to workflow before collecting artifacts):
- name: Decode keystore
  if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
  run: |
    echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > release-keystore.jks
- name: Sign APK (example)
  run: |
    jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-keystore.jks app/build/outputs/apk/release/app-release-unsigned.apk ${{ secrets.ANDROID_KEYSTORE_ALIAS }} -storepass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} -keypass ${{ secrets.ANDROID_KEY_PASSWORD }}

Make sure to add the following GitHub repository secrets if you use signing:
- ANDROID_KEYSTORE_BASE64 (base64 of your .jks)
- ANDROID_KEYSTORE_PASSWORD
- ANDROID_KEY_PASSWORD
- ANDROID_KEYSTORE_ALIAS
